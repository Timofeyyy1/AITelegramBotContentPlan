import logging
import os
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from app.utils.markdown_utils import escape_markdown_v2 as escape_markdown
from app.utils.message_utils import split_text

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from app.utils.prompt_templates import CONTENT_PLAN_PROMPT, POST_GENERATION_PROMPT
from app.database.requests import save_content_plan_answers
# from app.handlers.general_handlers import router as general_router # –û–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–µ–Ω –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞ –≤ —Ç–æ–º –∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
from app.keyboards.main_kb import get_content_plan_actions_keyboard # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∫ –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
from app.ai_generate import generate
from app.utils.post_utils import parse_formatted_plan_for_post # –¢–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è


router = Router()

# FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
class FSMContentPlan(StatesGroup):
    topic_audience = State()
    goal = State()
    frequency_format = State()
    usp = State()
    main_rubrics_topics = State()   # –ë—ã–ª–æ examples, —Ç–µ–ø–µ—Ä—å —ç—Ç–æ
    content_style = State()         # –ë—ã–ª–æ content_tone, —Ç–µ–ø–µ—Ä—å —ç—Ç–æ
    specific_topics = State()       # –°–º—ã—Å–ª –∏–∑–º–µ–Ω–µ–Ω, –Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–æ –∂–µ

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è FSM
QUESTIONS = [
    "–ö–∞–∫–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è?\n\n"
    "–ü—Ä–∏–º–µ—Ä:\n"
    "‚úÖ –ö–∞–Ω–∞–ª –æ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏, —É—á–µ–±–µ, –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫–∞—Ñ–µ–¥—Ä—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —Å–∏—Å—Ç–µ–º.",

    "–ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å —Å –ø–æ–º–æ—â—å—é –∫–∞–Ω–∞–ª–∞?\n\n"
    "–ü—Ä–∏–º–µ—Ä:\n"
    "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ —Å–æ–±—ã—Ç–∏—è—Ö, –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö. –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —É—á–∞—Å—Ç–∏—é –≤ –∂–∏–∑–Ω–∏ –∫–∞—Ñ–µ–¥—Ä—ã –∏ –ø—Ä–æ–µ–∫—Ç–∞—Ö.",

    "–ö–∞–∫ —á–∞—Å—Ç–æ –±—É–¥–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –∏ –∫–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?\n\n"
    "–ü—Ä–∏–º–µ—Ä:\n"
    "‚úÖ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç—å–∏, –æ–±–∑–æ—Ä—ã –∏ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏. –ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏/–≥–∞–π–¥—ã –ø–æ —É—á–µ–±–µ –∏ –∫–∞—Ä—å–µ—Ä–µ, –∏–Ω—Ç–µ—Ä—å–≤—å—é —Å –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞–º–∏ –∫–∞—Ñ–µ–¥—Ä—ã.",

    "–í —á–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –¥—Ä—É–≥–∏–º–∏ –≤ –≤–∞—à–µ–π –Ω–∏—à–µ? –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–º?\n\n"
    "–ü—Ä–∏–º–µ—Ä:\n"
    "‚úÖ –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≥–ª—É–±–æ–∫–∏–π —Ä–∞–∑–±–æ—Ä —É—á–µ–±–Ω—ã—Ö –∫–µ–π—Å–æ–≤ –∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –ò–¢–° –∫–∞—Ñ–µ–¥—Ä—ã, –∞ —Ç–∞–∫–∂–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏.",

    "–ù–∞–∑–æ–≤–∏—Ç–µ 3-5 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä—É–±—Ä–∏–∫ –∏–ª–∏ —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–µ.\n\n"
    "–ü—Ä–∏–º–µ—Ä:\n"
    "‚úÖ 1) –ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –ò–¢–°. 2) –°–æ–≤–µ—Ç—ã –æ—Ç —Å—Ç–∞—Ä—à–µ–∫—É—Ä—Å–Ω–∏–∫–æ–≤ (–≥–∞–π–¥—ã –ø–æ —É—á–µ–±–µ, –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏). 3) –ù–æ–≤–æ—Å—Ç–∏ –∫–∞—Ñ–µ–¥—Ä—ã/—Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ (–∞–Ω–æ–Ω—Å—ã, –¥–µ–¥–ª–∞–π–Ω—ã). 4) –ö–µ–π—Å-—Å—Ç–∞–¥–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫–∞—Ñ–µ–¥—Ä—ã. 5) –û–±–∑–æ—Ä –Ω–∞—É—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π.",

    "–ö–∞–∫–∏–º —Å—Ç–∏–ª–µ–º –¥–æ–ª–∂–µ–Ω –æ–±–ª–∞–¥–∞—Ç—å –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç?\n\n"
    "–ü—Ä–∏–º–µ—Ä:\n"
    "‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ.",

    "–ü–æ–º–∏–º–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä—É–±—Ä–∏–∫, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –∏–ª–∏ –æ—Å–æ–±–æ –≤–∞–∂–Ω—ã–µ —É–∑–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –≤ –ø–ª–∞–Ω?\n\n"
    "–ü—Ä–∏–º–µ—Ä:\n"
    "‚úÖ –†–∞–∑–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –±–∞–∑–µ –ò–ò, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∫–∞—Ñ–µ–¥—Ä—ã.\n"
    "‚úÖ –£–∑–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –û–¥–∏–Ω –¥–µ–Ω—å –∏–∑ –∂–∏–∑–Ω–∏ IT-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–ø–æ—Å–µ—â–µ–Ω–∏–µ –æ—Ñ–∏—Å–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π, –∏–Ω—Ç–µ—Ä–≤—å—é —Å–æ —Å—Ç–∞–∂–µ—Ä–∞–º–∏)\n"
    "‚úÖ –ê–Ω–æ–Ω—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ò–¢–°, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤—É—é—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∏ —Å—Ç—É–¥–µ–Ω—Ç—ã."
]

@router.message(Command("content_plan"))
async def cmd_content_plan(message: Message, state: FSMContext):
    await state.set_state(FSMContentPlan.topic_audience)
    await message.answer(QUESTIONS[0])

# === –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ===
@router.message(FSMContentPlan.topic_audience)
async def ask_goal(message: Message, state: FSMContext):
    await state.update_data(topic_audience=message.text)
    await state.set_state(FSMContentPlan.goal)
    await message.answer(QUESTIONS[1])

@router.message(FSMContentPlan.goal)
async def ask_frequency_format(message: Message, state: FSMContext):
    await state.update_data(goal=message.text)
    await state.set_state(FSMContentPlan.frequency_format)
    await message.answer(QUESTIONS[2])

@router.message(FSMContentPlan.frequency_format)
async def ask_usp(message: Message, state: FSMContext):
    await state.update_data(frequency_format=message.text)
    await state.set_state(FSMContentPlan.usp)
    await message.answer(QUESTIONS[3])

@router.message(FSMContentPlan.usp)
async def ask_main_rubrics_topics(message: Message, state: FSMContext):
    await state.update_data(usp=message.text)
    await state.set_state(FSMContentPlan.main_rubrics_topics)
    await message.answer(QUESTIONS[4])

@router.message(FSMContentPlan.main_rubrics_topics)
async def ask_content_style(message: Message, state: FSMContext):
    await state.update_data(main_rubrics_topics=message.text)
    await state.set_state(FSMContentPlan.content_style)
    await message.answer(QUESTIONS[5])

@router.message(FSMContentPlan.content_style)
async def ask_specific_topics(message: Message, state: FSMContext):
    await state.update_data(content_style=message.text)
    await state.set_state(FSMContentPlan.specific_topics)
    await message.answer(QUESTIONS[6])

@router.message(FSMContentPlan.specific_topics)
async def finish_content_plan(message: Message, state: FSMContext):
    data = await state.update_data(specific_topics=message.text)
    data["tg_id"] = message.from_user.id

    await save_content_plan_answers(data)
    
    await message.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –≤–∞—à –ø–ª–∞–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")

    from jinja2 import Template
    template = Template(CONTENT_PLAN_PROMPT)
    prompt = template.render(
        topic_audience=data['topic_audience'],
        goal=data['goal'],
        frequency_format=data['frequency_format'],
        usp=data['usp'],
        main_rubrics_topics=data['main_rubrics_topics'],
        content_style=data['content_style'],
        specific_topics=data['specific_topics']
    )

    generated_plan_text = await generate(prompt)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–ª–∞–Ω–∞ –≤ FSMContext
    await state.update_data(last_generated_plan_text=generated_plan_text)
    await state.update_data(original_plan_data=data) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞

    parts = split_text(generated_plan_text, 4096)

    for i, part in enumerate(parts):
        try:
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º escape_markdown –∫ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
            final_part_to_send = escape_markdown(part) 
            
            logging.info(f"Attempting to send part {i+1}/{len(parts)} (length: {len(final_part_to_send)} bytes).")
            logging.debug(f"Part content:\n---\n{final_part_to_send}\n---") 

            await message.answer(final_part_to_send, parse_mode="MarkdownV2")
        except Exception as e:
            logging.error(f"Telegram API Error sending part {i+1}: {e}", exc_info=True)
            logging.error(f"Problematic part content (full):\n---\n{final_part_to_send}\n---") 
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞. –°–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear() 
            return 

    await message.answer(
        "–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –≥–æ—Ç–æ–≤! –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞? üíª",
        reply_markup=get_content_plan_actions_keyboard() # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    )
    # –ù–ï –û–ß–ò–©–ê–ï–ú state, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±–µ—Ä–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç)
    # await state.clear()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞" (–≤–æ–∑–≤—Ä–∞—â–µ–Ω –∫ —Å—Ç–∞—Ä–æ–º—É –≤–∏–¥—É)
@router.callback_query(F.data == "generate_example_post")
async def handle_generate_example_post_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞...", show_alert=False) # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    user_data = await state.get_data()
    generated_plan_text = user_data.get("last_generated_plan_text")
    original_plan_data = user_data.get("original_plan_data")

    if not generated_plan_text or not original_plan_data:
        await callback.message.answer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
    day_1_data = parse_formatted_plan_for_post(generated_plan_text)

    if not day_1_data:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ä–º–∞—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è.")
        await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
    from jinja2 import Template
    post_template = Template(POST_GENERATION_PROMPT)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–∞ (day_data) –∏ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ (original_plan_data)
    post_prompt_data = {
        **original_plan_data, # –í—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
        "day_data": day_1_data # –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
    }
    post_prompt = post_template.render(**post_prompt_data)

    await callback.message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç (–ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é generate)
    generated_post_text = await generate(post_prompt)

    # –î–µ–ª–∏–º –ø–æ—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    post_parts = split_text(generated_post_text, 4096)

    for i, part in enumerate(post_parts):
        try:
            final_post_part_to_send = escape_markdown(part) 
            logging.info(f"Attempting to send post part {i+1}/{len(post_parts)} (length: {len(final_post_part_to_send)} bytes).")
            logging.debug(f"Post part content:\n---\n{final_post_part_to_send}\n---") 
            await callback.message.answer(final_post_part_to_send, parse_mode="MarkdownV2")
        except Exception as e:
            logging.error(f"Telegram API Error sending post part {i+1}: {e}", exc_info=True)
            logging.error(f"Problematic post part content (full):\n---\n{final_post_part_to_send}\n---")
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ –ø–æ—Å—Ç–∞. –°–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return

    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
